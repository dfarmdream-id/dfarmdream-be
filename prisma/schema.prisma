// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

model User {
  id         String      @id @default(uuid())
  email      String?
  username   String
  fullName   String?
  password   String
  identityId String?
  phone      String?
  address    String?
  position   Position?   @relation(fields: [positionId], references: [id])
  status     UserStatus? @default(INACTIVE)

  deletedAt  DateTime?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  blog       Blog[]
  faq        Faq[]
  roles      RoleUser[]
  positionId String?
  sites      UserSite[]
  Investor   Investor[]

  @@index([email, username, identityId])
}

model UserSite {
  id        String    @id @unique @default(uuid())
  userId    String
  siteId    String
  deletedAt DateTime?
  user      User      @relation(fields: [userId], references: [id])
  site      Site      @relation(fields: [siteId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Blog {
  id        String    @id @unique @default(uuid())
  title     String
  content   String
  author    User      @relation(fields: [userId], references: [id])
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  cover     File?     @relation(fields: [coverId], references: [id])
  coverId   String?
  slug      String
}

model File {
  id        String    @id @unique @default(uuid())
  name      String
  size      Int
  url       String?
  public    Boolean   @default(false)
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  mime      String
  provider  String    @default("S3")
  Blog      Blog[]
}

model Faq {
  id          String    @id @unique @default(uuid())
  question    String
  answer      String
  createdBy   User      @relation(fields: [createdById], references: [id])
  createdById String
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Role {
  id   String @id @unique @default(uuid())
  name String

  deletedAt   DateTime?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  permissions RolePermission[]
}

model RolePermission {
  id           String     @id @unique @default(uuid())
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       String
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String
  deletedAt    DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model RoleUser {
  id        String    @id @unique @default(uuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  roleId    String
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Permission {
  id             String           @id @unique @default(uuid())
  name           String
  deletedAt      DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  rolePermission RolePermission[]
}

model Site {
  id            String        @id @unique @default(uuid())
  name          String
  deletedAt     DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  province      Province?     @relation(fields: [provinceId], references: [id])
  provinceId    String?
  city          City?         @relation(fields: [cityId], references: [id])
  cityId        String?
  district      District?     @relation(fields: [districtId], references: [id])
  districtId    String?
  subDistrict   SubDistrict?  @relation(fields: [subDistrictId], references: [id])
  subDistrictId String?
  userSites     UserSite[]
  address       String?
  cages         ChickenCage[]
}

model Position {
  id        String    @id @unique @default(uuid())
  name      String
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User[]
}

model Province {
  id String @id @default(uuid())

  name      String
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  city      City[]
  Site      Site[]
}

model City {
  id String @id @default(uuid())

  name       String
  province   Province   @relation(fields: [provinceId], references: [id])
  deletedAt  DateTime?
  createdAt  DateTime   @default(now())
  provinceId String
  district   District[]
  site       Site[]
}

model District {
  id String @id @default(uuid())

  name        String
  city        City          @relation(fields: [cityId], references: [id])
  deletedAt   DateTime?
  createdAt   DateTime      @default(now())
  cityId      String
  subDistrict SubDistrict[]
  site        Site[]
}

model SubDistrict {
  id String @id @default(uuid())

  name       String
  district   District  @relation(fields: [districtId], references: [id])
  deletedAt  DateTime?
  createdAt  DateTime  @default(now())
  districtId String
  site       Site[]
}

model ChickenCage {
  id        String            @id @unique @default(uuid())
  name      String
  deletedAt DateTime?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  siteId    String?
  site      Site?             @relation(fields: [siteId], references: [id])
  width     Int               @default(0)
  height    Int               @default(0)
  capacity  Int               @default(0)
  status    String?           @default("ACTIVE")
  racks     ChickenCageRack[]
}

model ChickenCageRack {
  id        String       @id @unique @default(uuid())
  name      String
  cage      ChickenCage? @relation(fields: [cageId], references: [id])
  cageId    String?
  deletedAt DateTime?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  chickens  Chicken[]
}

enum ChickenStatus {
  ALIVE
  DEAD
}

model Chicken {
  id        String           @id @unique @default(uuid())
  name      String
  status    ChickenStatus?   @default(ALIVE)
  rack      ChickenCageRack? @relation(fields: [rackId], references: [id])
  rackId    String?
  deletedAt DateTime?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model Investor {
  id          String    @id @unique @default(uuid())
  name        String
  username    String
  password    String
  identityId  String?
  address     String?
  phone       String?
  deletedAt   DateTime?
  createdBy   User?     @relation(fields: [createdById], references: [id])
  createdById String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([username, identityId])
}

model DocumentInvestment {
  id        String    @id @unique @default(uuid())
  name      String
  url       String
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
