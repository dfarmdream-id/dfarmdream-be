// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

model User {
  id                   String      @id @default(uuid())
  nip                  String?
  email                String?
  username             String
  fullName             String?
  password             String
  identityId           String?
  phone                String?
  address              String?
  photoProfile         String?
  position             Position?   @relation(fields: [positionId], references: [id])
  status               UserStatus? @default(INACTIVE)
  lastSendNotification DateTime?
  telegramId           String?
  telegramUsername     String?

  deletedAt                 DateTime?
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  blog                      Blog[]
  faq                       Faq[]
  roles                     RoleUser[]
  positionId                String?
  sites                     UserSite[]
  cages                     UserCage[]
  investor                  Investor[]
  cashFlow                  CashFlow[]
  transaction               Transaction[]
  WarehouseTransaction      WarehouseTransaction[]
  attendance                Attendance[]
  WarehouseTransactionItems WarehouseTransactionItems[]
  biaya                     Biaya[]
  JournalHeader             JournalHeader[]
  KartuStokBarang           KartuStokBarang[]

  @@index([email, username, identityId])
}

model UserSite {
  id        String    @id @unique @default(uuid())
  userId    String
  siteId    String
  deletedAt DateTime?
  user      User      @relation(fields: [userId], references: [id])
  site      Site      @relation(fields: [siteId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model UserCage {
  id        String    @id @unique @default(uuid())
  userId    String
  cageId    String
  deletedAt DateTime?
  user      User      @relation(fields: [userId], references: [id])
  cage      Cage      @relation(fields: [cageId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Blog {
  id        String    @id @unique @default(uuid())
  title     String
  content   String
  author    User      @relation(fields: [userId], references: [id])
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  cover     File?     @relation(fields: [coverId], references: [id])
  coverId   String?
  slug      String
}

model File {
  id                 String               @id @unique @default(uuid())
  name               String
  size               Int
  url                String?
  public             Boolean              @default(false)
  deletedAt          DateTime?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  mime               String
  provider           String               @default("S3")
  Blog               Blog[]
  DocumentInvestment DocumentInvestment[]
}

model Faq {
  id          String    @id @unique @default(uuid())
  question    String
  answer      String
  createdBy   User      @relation(fields: [createdById], references: [id])
  createdById String
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Role {
  id   String @id @unique @default(uuid())
  name String

  deletedAt    DateTime?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  permissions  RolePermission[]
  roleUser     RoleUser[]
  investorRole InvestorRole[]
}

model RolePermission {
  id           String     @id @unique @default(uuid())
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       String
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String
  deletedAt    DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model RoleUser {
  id        String    @id @unique @default(uuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  roleId    String
  role      Role      @relation(fields: [roleId], references: [id])
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Permission {
  id             String           @id @unique @default(uuid())
  name           String
  code           String           @default("")
  deletedAt      DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  rolePermission RolePermission[]
}

model Site {
  id                   String                 @id @unique @default(uuid())
  name                 String
  deletedAt            DateTime?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  province             Province?              @relation(fields: [provinceId], references: [id])
  provinceId           String?
  city                 City?                  @relation(fields: [cityId], references: [id])
  cityId               String?
  district             District?              @relation(fields: [districtId], references: [id])
  districtId           String?
  subDistrict          SubDistrict?           @relation(fields: [subDistrictId], references: [id])
  subDistrictId        String?
  userSites            UserSite[]
  address              String?
  cages                Cage[]
  cashFlow             CashFlow[]
  transaction          Transaction[]
  biaya                Biaya[]
  WarehouseTransaction WarehouseTransaction[]
  Price                Price[]
  DocumentInvestment   DocumentInvestment[]
  PenerimaanModal      PenerimaanModal[]
  PersediaanPakanObat  PersediaanPakanObat[]
  KartuStokBarang      KartuStokBarang[]
  CashFlowCategory     CashFlowCategory[]
}

model Position {
  id           String    @id @unique @default(uuid())
  name         String
  checkinTime  DateTime? @db.Time()
  checkoutTime DateTime? @db.Time()
  deletedAt    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User[]
}

model Province {
  id String @id @default(uuid())

  name      String
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  city      City[]
  site      Site[]
}

model City {
  id String @id @default(uuid())

  name       String
  province   Province   @relation(fields: [provinceId], references: [id])
  deletedAt  DateTime?
  createdAt  DateTime   @default(now())
  provinceId String
  district   District[]
  site       Site[]
}

model District {
  id String @id @default(uuid())

  name        String
  city        City          @relation(fields: [cityId], references: [id])
  deletedAt   DateTime?
  createdAt   DateTime      @default(now())
  cityId      String
  subDistrict SubDistrict[]
  site        Site[]
}

model SubDistrict {
  id String @id @default(uuid())

  name       String
  district   District  @relation(fields: [districtId], references: [id])
  deletedAt  DateTime?
  createdAt  DateTime  @default(now())
  districtId String
  site       Site[]
}

model Cage {
  id                   String                 @id @unique @default(uuid())
  name                 String
  deletedAt            DateTime?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  siteId               String?
  site                 Site?                  @relation(fields: [siteId], references: [id])
  width                Int                    @default(0)
  height               Int                    @default(0)
  capacity             Int                    @default(0)
  status               String?                @default("ACTIVE")
  userCages            UserCage[]
  racks                CageRack[]
  cashFlow             CashFlow[]
  transaction          Transaction[]
  warehouseTransaction WarehouseTransaction[]
  IotSensor            IotSensor[]
  CctvCamera           CctvCamera[]
  documents            DocumentInvestment[]
  biaya                Biaya[]
  PenerimaanModal      PenerimaanModal[]
  PersediaanPakanObat  PersediaanPakanObat[]
  KartuStokBarang      KartuStokBarang[]
}

model CageRack {
  id                        String                      @id @unique @default(uuid())
  name                      String
  cage                      Cage?                       @relation(fields: [cageId], references: [id])
  cageId                    String?
  deletedAt                 DateTime?
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  chickens                  Chicken[]
  transaction               Transaction[]
  warehouseTransactionItems WarehouseTransactionItems[]
}

enum ChickenStatus {
  ALIVE
  DEAD
  SPENT
}

model Chicken {
  id        String         @id @unique @default(uuid())
  name      String
  status    ChickenStatus? @default(ALIVE)
  rack      CageRack?      @relation(fields: [rackId], references: [id])
  rackId    String?
  deletedAt DateTime?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model Investor {
  id          String    @id @unique @default(uuid())
  fullName    String    @default("")
  username    String
  password    String
  identityId  String?
  address     String?
  phone       String?
  deletedAt   DateTime?
  createdBy   User?     @relation(fields: [createdById], references: [id])
  createdById String?

  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  documentInvestment DocumentInvestment[]
  roles              InvestorRole[]
  PenerimaanModal    PenerimaanModal[]

  @@index([username, identityId])
}

model InvestorRole {
  id         String    @id @unique @default(uuid())
  investor   Investor  @relation(fields: [investorId], references: [id])
  investorId String
  role       Role      @relation(fields: [roleId], references: [id])
  roleId     String
  deletedAt  DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model DocumentInvestment {
  id         String    @id @unique @default(uuid())
  name       String
  file       File?     @relation(fields: [fileId], references: [id])
  fileId     String?
  cageId     String?
  cage       Cage?     @relation(fields: [cageId], references: [id])
  investor   Investor? @relation(fields: [investorId], references: [id])
  investorId String?
  site       Site?     @relation(fields: [siteId], references: [id])
  siteId     String?
  amount     Int?      @default(0)
  deletedAt  DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

enum CashFlowType {
  INCOME
  EXPENSE
}

model CashFlow {
  id                 String           @id @unique @default(uuid())
  code               String?          @default(cuid())
  name               String
  amount             Int
  type               CashFlowType
  site               Site             @relation(fields: [siteId], references: [id])
  siteId             String
  cage               Cage?            @relation(fields: [cageId], references: [id])
  cageId             String?
  remark             String?
  category           CashFlowCategory @relation(fields: [cashFlowCategoryId], references: [id])
  cashFlowCategoryId String
  createdBy          User             @relation(fields: [createdById], references: [id])
  createdById        String
  status             String           @default("PENDING")
  deletedAt          DateTime?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
}

model CashFlowCategory {
  id        String     @id @default(uuid())
  code      String?    @default(cuid())
  name      String
  site      Site?      @relation(fields: [siteId], references: [id])
  siteId    String?
  deletedAt DateTime?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  CashFlow  CashFlow[]
}

enum PriceType {
  CHICKEN
  EGG
}

enum PriceStatus {
  ACTIVE
  INACTIVE
}

model Price {
  id     String       @id @default(uuid())
  name   String
  type   PriceType
  status PriceStatus? @default(ACTIVE)
  value  Int          @default(0)
  site   Site?        @relation(fields: [siteId], references: [id])
  siteId String?

  deletedAt            DateTime?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  WarehouseTransaction WarehouseTransaction[]
}

enum TransactionType {
  EGG
  CHICKEN
}

enum WarehouseTransactionCategoryEnum {
  EGG
  CHICKEN
}

model WarehouseTransactionItems {
  id                     String               @id @default(uuid())
  code                   String               @default(cuid())
  qty                    Int                  @default(0)
  warehouseTransaction   WarehouseTransaction @relation(fields: [warehouseTransactionId], references: [id])
  rackId                 String
  rack                   CageRack             @relation(fields: [rackId], references: [id])
  createdBy              User                 @relation(fields: [createdById], references: [id])
  createdById            String
  deletedAt              DateTime?
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  warehouseTransactionId String
}

model Transaction {
  id     String          @id @default(uuid())
  site   Site            @relation(fields: [siteId], references: [id])
  siteId String
  rack   CageRack        @relation(fields: [rackId], references: [id])
  rackId String
  cage   Cage            @relation(fields: [cageId], references: [id])
  cageId String
  code   String          @default(cuid())
  qty    Int             @default(0)
  type   TransactionType

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum WarehouseTransactionType {
  IN
  OUT
}

model WarehouseTransaction {
  id          String                            @id @unique @default(uuid())
  site        Site?                             @relation(fields: [siteId], references: [id])
  siteId      String
  code        String                            @default(cuid())
  cage        Cage                              @relation(fields: [cageId], references: [id])
  cageId      String
  qty         Int
  weight      Int
  type        WarehouseTransactionType          @default(IN)
  createdBy   User                              @relation(fields: [createdById], references: [id])
  createdById String
  deletedAt   DateTime?
  createdAt   DateTime                          @default(now())
  updatedAt   DateTime                          @updatedAt
  items       WarehouseTransactionItems[]
  category    WarehouseTransactionCategoryEnum? @default(EGG)
  price       Price?                            @relation(fields: [priceId], references: [id])
  priceId     String?
  CashierDeliveryAt    DateTime? @db.Timestamptz()
}

model IotSensor {
  id                 String               @id @unique @default(uuid())
  name               String?              @default("")
  code               String               @unique
  cage               Cage?                @relation(fields: [cageId], references: [id])
  cageId             String?
  tempThreshold      Float
  humidityThreshold  Float
  amoniaThreshold    Float?
  currentTemperature Float?
  currentHumidty     Float?
  currentAmonia      Float?
  currentAirQuality  Float?
  lampStatus         Float?
  relayLog           RelayLog[]
  telegramLog        TelegramMesasgeLog[]
  deletedAt          DateTime?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  SensorDevice       SensorDevice[]
}

enum SensorType {
  TEMP
  HUMIDITY
  GAS
  LDR
}

model SensorDevice {
  id            String      @id @unique @default(uuid())
  code          String      @unique
  deviceId      String?
  type          SensorType
  lastestValue  Float?      @default(0)
  lastUpdatedAt BigInt?     @default(0)
  IotSensor     IotSensor?  @relation(fields: [deviceId], references: [id])
  SensorLog     SensorLog[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model SensorLog {
  id          String        @id @unique @default(uuid())
  sensorId    String?       
  sensor      SensorDevice? @relation(fields: [sensorId], references: [id])
  type        SensorType    @default(HUMIDITY)
  value       Float         @default(0)
  epoch       BigInt
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  iotSensorId String?
}

model TelegramMesasgeLog {
  id          String     @id @unique @default(uuid())
  sensorId    String?
  userId      String?
  sensor      IotSensor? @relation(fields: [sensorId], references: [id])
  message     String?
  temperature Float
  humidity    Float
  airQuality  Float
  amonia      Float
  ldrValue    Int
  epoch       BigInt
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model RelayLog {
  id          String     @id @unique @default(uuid())
  sensorId    String?
  sensor      IotSensor? @relation(fields: [sensorId], references: [id])
  relayNumber Int
  relayDesc   String?
  status      Int
  humidity    Float?
  temperature Float?
  amonia      Float?
  ldrValue    Int?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model CctvCamera {
  id          String    @id @unique @default(uuid())
  cage        Cage?     @relation(fields: [cageId], references: [id])
  cageId      String?
  name        String
  ipAddress   String
  description String?
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Attendance {
  id              String    @id @unique @default(uuid())
  userId          String
  name            String
  tanggal         String?
  jamMasuk        String?
  jamKeluar       String?
  timestampMasuk  DateTime? @db.Timestamp()
  timestampKeluar DateTime? @db.Timestamp()
  user            User?     @relation(fields: [userId], references: [id])
  status          Int?      @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now()) @updatedAt
}

model KategoriBiaya {
  id           String    @id @unique @default(uuid())
  namaKategori String
  kodeAkun     String
  status       Int
  biaya        Biaya[]
  deletedAt    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Biaya {
  id            String        @id @unique @default(uuid())
  kategoriId    String
  kategoriBiaya KategoriBiaya? @relation(fields: [kategoriId], references: [id])
  tanggal       String
  siteId        String
  site          Site?          @relation(fields: [siteId], references: [id])
  cageId        String
  cage          Cage?          @relation(fields: [cageId], references: [id])
  userId        String
  user          User?          @relation(fields: [userId], references: [id])
  keterangan    String?
  biaya         Int
  status        Int
  goodsId       String?        
  goods         Goods?  @relation(fields: [goodsId], references: [id])
  deletedAt     DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model PenerimaanModal {
  id         String @id @unique @default(uuid())
  tanggal    String @db.VarChar(100)
  investorId String
  nominal    Int    @default(0)
  siteId     String
  cageId     String
  status     Int    @default(1)

  investor  Investor  @relation(fields: [investorId], references: [id])
  site      Site      @relation(fields: [siteId], references: [id])
  cage      Cage      @relation(fields: [cageId], references: [id])
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Coa {
  id                 String    @id @unique @default(uuid())
  code               Int @unique
  name               String
  level              Int
  isBalanceSheet     Boolean
  isRetainedEarnings Boolean
  groupId            String
  group              GroupCoa  @relation(fields: [groupId], references: [id])
  deletedAt          DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  JournalTemplateDetail JournalTemplateDetail[]

  JournalDetail JournalDetail[]
}

model GroupCoa {
  id        String    @id @unique @default(uuid())
  code      Int
  name      String
  status    Int
  coa       Coa[]
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model JournalTemplate {
  id        String    @id @unique @default(uuid())
  code      String @unique
  name      String
  jurnalTypeId String
  status    String
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  jurnalType   JournalType @relation(fields: [jurnalTypeId], references: [id])
  journalTemplateDetails JournalTemplateDetail[]
}

model JournalTemplateDetail {
  id        String    @id @unique @default(uuid())
  jurnalTemplateCode String
  jurnalTemplate     JournalTemplate @relation(fields: [jurnalTemplateCode], references: [code])
  coaCode   Int
  coa       Coa @relation(fields: [coaCode], references: [code])
  typeLedger LedgerEnum
  status    String
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum LedgerEnum {
  DEBIT
  CREDIT
}

model JournalType {
  id            String          @id @unique @default(uuid())
  code Int
  name          String
  status        String
  deletedAt     DateTime?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  journalHeader JournalHeader[]

  JournalTemplate JournalTemplate[]
}

model JournalHeader {
  id            String      @id @unique @default(uuid())
  code         String
  date          DateTime
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  journalType   JournalType @relation(fields: [jurnalTypeId], references: [id])
  jurnalTypeId  String
  debtTotal     Int
  creditTotal   Int
  status        String
  deletedAt     DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  journalDetails JournalDetail[]
}

model JournalDetail {
  id            String      @id @unique @default(uuid())
  journalHeader JournalHeader @relation(fields: [journalHeaderId], references: [id])
  journalHeaderId String
  coaCode       Int
  coa           Coa         @relation(fields: [coaCode], references: [code])
  debit         Int
  credit        Int
  note          String
  deletedAt     DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model PersediaanPakanObat {
  id         String     @id @unique @default(uuid())
  namaBarang String
  qty        Int
  harga      Int        @default(0)
  total      Int        @default(0)
  siteId     String
  cageId     String
  status     Int        @default(1)
  tipeBarang TipeBarang

  site      Site              @relation(fields: [siteId], references: [id])
  cage      Cage              @relation(fields: [cageId], references: [id])
  kartuStok KartuStokBarang[]
  deletedAt DateTime?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model KartuStokBarang {
  id         String              @id @unique @default(uuid())
  tanggal    String
  barangId   String
  barang     PersediaanPakanObat @relation(fields: [barangId], references: [id])
  qtyAsal    Int
  qtyIn      Int
  qtyOut     Int
  qtyAkhir   Int
  karyawanId String
  siteId     String
  cageId     String

  site       Site    @relation(fields: [siteId], references: [id])
  cage       Cage    @relation(fields: [cageId], references: [id])
  karyawan   User    @relation(fields: [karyawanId], references: [id])
  keterangan String?
  status     Int?    @default(1)
  harga      Int
  total      Int

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum TipeBarang {
  PAKAN
  OBAT
}

model Goods{
  id  String  @id @unique @default(uuid())
  sku  String
  name String
  type TipeBarang @default(PAKAN)
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  biaya Biaya[]
}