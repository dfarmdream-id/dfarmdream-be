// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

model User {
  id         String      @id @default(uuid())
  email      String?
  username   String
  fullName   String?
  password   String
  identityId String?
  phone      String?
  address    String?
  position   Position?   @relation(fields: [positionId], references: [id])
  status     UserStatus? @default(INACTIVE)

  deletedAt            DateTime?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  blog                 Blog[]
  faq                  Faq[]
  roles                RoleUser[]
  positionId           String?
  sites                UserSite[]
  investor             Investor[]
  cashFlow             CashFlow[]
  transaction          Transaction[]
  WarehouseTransaction WarehouseTransaction[]

  @@index([email, username, identityId])
}

model UserSite {
  id        String    @id @unique @default(uuid())
  userId    String
  siteId    String
  deletedAt DateTime?
  user      User      @relation(fields: [userId], references: [id])
  site      Site      @relation(fields: [siteId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Blog {
  id        String    @id @unique @default(uuid())
  title     String
  content   String
  author    User      @relation(fields: [userId], references: [id])
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  cover     File?     @relation(fields: [coverId], references: [id])
  coverId   String?
  slug      String
}

model File {
  id        String    @id @unique @default(uuid())
  name      String
  size      Int
  url       String?
  public    Boolean   @default(false)
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  mime      String
  provider  String    @default("S3")
  Blog      Blog[]
}

model Faq {
  id          String    @id @unique @default(uuid())
  question    String
  answer      String
  createdBy   User      @relation(fields: [createdById], references: [id])
  createdById String
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Role {
  id   String @id @unique @default(uuid())
  name String

  deletedAt   DateTime?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  permissions RolePermission[]
}

model RolePermission {
  id           String     @id @unique @default(uuid())
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       String
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String
  deletedAt    DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model RoleUser {
  id        String    @id @unique @default(uuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  roleId    String
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Permission {
  id             String           @id @unique @default(uuid())
  name           String
  deletedAt      DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  rolePermission RolePermission[]
}

model Site {
  id                   String                 @id @unique @default(uuid())
  name                 String
  deletedAt            DateTime?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  province             Province?              @relation(fields: [provinceId], references: [id])
  provinceId           String?
  city                 City?                  @relation(fields: [cityId], references: [id])
  cityId               String?
  district             District?              @relation(fields: [districtId], references: [id])
  districtId           String?
  subDistrict          SubDistrict?           @relation(fields: [subDistrictId], references: [id])
  subDistrictId        String?
  userSites            UserSite[]
  address              String?
  cages                Cage[]
  cashFlow             CashFlow[]
  transaction          Transaction[]
  WarehouseTransaction WarehouseTransaction[]
}

model Position {
  id        String    @id @unique @default(uuid())
  name      String
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User[]
}

model Province {
  id String @id @default(uuid())

  name      String
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  city      City[]
  site      Site[]
}

model City {
  id String @id @default(uuid())

  name       String
  province   Province   @relation(fields: [provinceId], references: [id])
  deletedAt  DateTime?
  createdAt  DateTime   @default(now())
  provinceId String
  district   District[]
  site       Site[]
}

model District {
  id String @id @default(uuid())

  name        String
  city        City          @relation(fields: [cityId], references: [id])
  deletedAt   DateTime?
  createdAt   DateTime      @default(now())
  cityId      String
  subDistrict SubDistrict[]
  site        Site[]
}

model SubDistrict {
  id String @id @default(uuid())

  name       String
  district   District  @relation(fields: [districtId], references: [id])
  deletedAt  DateTime?
  createdAt  DateTime  @default(now())
  districtId String
  site       Site[]
}

model Cage {
  id                   String                 @id @unique @default(uuid())
  name                 String
  deletedAt            DateTime?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  siteId               String?
  site                 Site?                  @relation(fields: [siteId], references: [id])
  width                Int                    @default(0)
  height               Int                    @default(0)
  capacity             Int                    @default(0)
  status               String?                @default("ACTIVE")
  racks                CageRack[]
  cashFlow             CashFlow[]
  transaction          Transaction[]
  WarehouseTransaction WarehouseTransaction[]
}

model CageRack {
  id                   String                 @id @unique @default(uuid())
  name                 String
  cage                 Cage?                  @relation(fields: [cageId], references: [id])
  cageId               String?
  deletedAt            DateTime?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  chickens             Chicken[]
  transaction          Transaction[]
  WarehouseTransaction WarehouseTransaction[]
}

enum ChickenStatus {
  ALIVE
  DEAD
  SPENT
}

model Chicken {
  id        String         @id @unique @default(uuid())
  name      String
  status    ChickenStatus? @default(ALIVE)
  rack      CageRack?      @relation(fields: [rackId], references: [id])
  rackId    String?
  deletedAt DateTime?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model Investor {
  id          String    @id @unique @default(uuid())
  fullName    String    @default("")
  username    String
  password    String
  identityId  String?
  address     String?
  phone       String?
  deletedAt   DateTime?
  createdBy   User?     @relation(fields: [createdById], references: [id])
  createdById String?

  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  documentInvestment DocumentInvestment[]

  @@index([username, identityId])
}

model DocumentInvestment {
  id         String    @id @unique @default(uuid())
  name       String
  url        String
  investor   Investor? @relation(fields: [investorId], references: [id])
  investorId String?
  deletedAt  DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

enum CashFlowType {
  INCOME
  EXPENSE
}

model CashFlow {
  id                 String           @id @unique @default(uuid())
  code               String?          @default(cuid())
  name               String
  amount             Int
  type               CashFlowType
  site               Site             @relation(fields: [siteId], references: [id])
  siteId             String
  cage               Cage?            @relation(fields: [cageId], references: [id])
  cageId             String?
  remark             String?
  category           CashFlowCategory @relation(fields: [cashFlowCategoryId], references: [id])
  cashFlowCategoryId String
  createdBy          User             @relation(fields: [createdById], references: [id])
  createdById        String
  status             String           @default("PENDING")
  deletedAt          DateTime?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
}

model CashFlowCategory {
  id        String     @id @default(uuid())
  code      String?    @default(cuid())
  name      String
  deletedAt DateTime?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  CashFlow  CashFlow[]
}

enum PriceType {
  CHICKEN
  EGG
}

enum PriceStatus {
  ACTIVE
  INACTIVE
}

model Price {
  id     String       @id @default(uuid())
  name   String
  type   PriceType
  status PriceStatus? @default(ACTIVE)
  value  Int          @default(0)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum TransactionType {
  EGG
  CHICKEN
}

model Transaction {
  id     String          @id @default(uuid())
  site   Site            @relation(fields: [siteId], references: [id])
  siteId String
  rack   CageRack        @relation(fields: [rackId], references: [id])
  rackId String
  cage   Cage            @relation(fields: [cageId], references: [id])
  cageId String
  code   String          @default(cuid())
  qty    Int             @default(0)
  type   TransactionType

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum WarehouseTransactionType {
  IN
  OUT
}

model WarehouseTransaction {
  id          String                   @id @unique @default(uuid())
  site        Site?                    @relation(fields: [siteId], references: [id])
  siteId      String
  code        String                   @default(cuid())
  cage        Cage                     @relation(fields: [cageId], references: [id])
  cageId      String
  rack        CageRack                 @relation(fields: [rackId], references: [id])
  rackId      String
  qty         Int
  weight      Int
  type        WarehouseTransactionType @default(IN)
  createdBy   User                     @relation(fields: [createdById], references: [id])
  createdById String
  deletedAt   DateTime?
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt
}
